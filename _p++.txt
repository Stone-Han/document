*p++的问题

	  int a[3]={1,2,3};
	  int *p=a;
	  cout<<p<<endl;    //0xbf888a84  
	  cout<<*p<<endl;  //1  
	  cout<<*p++<<endl;  //1  
	  cout<<p<<endl;  //0xbf888a88  
	  
	  
这里说明p是数组a的首地址，*p是首地址存放的数据1.
*p++是先输出*p，然后再将p++.

然后把*p++换成*(p++)，输出结果是一样的。
这说明在C++中，运算符++的优先级高于*


	  int a[3]={1,2,3};
	  int *p=a;
	  cout<<p<<endl;	//0xbf99c504
	  cout<<*p<<endl;	//1
	   cout<<(*p)++<<endl;	//1
	  cout<<p<<endl;	//0xbf99c504
	  cout<<*p<<endl;	//2
	    cout<<a[0]<<" "<<a[1]<<" "<<a[2]<<endl;	//2 2 3
	    
通过这组测试说明cout<<(*p)++<<endl;的意思是，先输出*p的值，然后将(*p)的值自增1，也就是a[0]对应的值自增1. 但是此时p的值并没有改变，所以下面输出p并没有发生变化。而发生变化的是*p的值，也就是a[0]的值。

所以，总结一下。
*p++=*(p++) 先输出*p的值，然后再把p++，即指针后移一位。
而(*p)++不改变指针的值，而把p指向的数据增加1.
		  
	 int a[3]={1,2,3};
	  int *p=a;
	  int b[3]={4,5,6};
	  int *q=b;
	  for(int i=0;i<3;i++)
	  {
	      *p++=*q++;
	  }	  
	  cout<<a[0]<<" "<<a[1]<<" "<<a[2]<<endl; 
	   cout<<b[0]<<" "<<b[1]<<" "<<b[2]<<endl; 
	
从上面的分析我们可以看到*p++=*q++也就是先将*p=*q，也就是把q指针指向的数据赋值给p指针指向的地方，然后两个指针同时向后移一位。  

